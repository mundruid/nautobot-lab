---
- hosts: "localhost"
  connection: "local"
  vars:
    nautobot_root: "{{ lookup('env', 'NAUTOBOT_ROOT') }}"
    nautobot_db_name: "{{ lookup('env', 'DB_NAME') }}"
    nautobot_db_username: "{{ lookup('env', 'DB_USER') }}"
    nautobot_db_password: "{{ lookup('env', 'DB_PASSWORD') }}"
    allowed_hosts:
      - "*"

  tasks:
    - name: "RUN SYSTEMCTL DAEMON-RELOAD"
      ansible.builtin.command: "systemctl daemon-reload"

    - name: "UPDATE SUPERVISORD.CONF"
      ansible.builtin.template:
        src: "supervisord.conf"
        dest: "/etc/supervisord.conf"
        owner: "root"
        group: "root"
        mode: "0640"

    - name: "ADD LOAD MOCK DATA SCRIPT"
      ansible.builtin.template:
        src: "loaddata.sh"
        dest: "/usr/local/bin/load-mock-data"
        owner: "root"
        group: "root"
        mode: "0755"

    - name: "UPDATE REDIS.CONF"
      ansible.builtin.template:
        src: "redis.conf"
        dest: "/etc/redis/redis.conf"
        owner: "redis"
        group: "redis"
        mode: "0640"

    - name: "UPDATE PG_HBA.CONF"
      ansible.builtin.template:
        src: "pg_hba.conf"
        dest: "/etc/postgresql/12/main/pg_hba.conf"
        owner: "postgres"
        group: "postgres"
        mode: "0600"
      register: "hba_update"

    - name: "RESTART POSTGRESQL"
      ansible.builtin.service:
        name: "postgresql"
        state: "restarted"
      when: "hba_update.changed"

    - name: "CREATE NAUTOBOT DATABASE"
      community.postgresql.postgresql_db:
        name: "nautobot"
        state: "present"

    - name: "CREATE NAUTOBOT DATABASE USER AND GRANT PRIVILEGES TO DATABASE"
      community.postgresql.postgresql_user:
        db: "{{ nautobot_db_name }}"
        name: "{{ nautobot_db_username }}"
        password: "{{ nautobot_db_password }}"
        priv: "ALL"
        state: "present"

    - name: "CREATE NAUTOBOT DIRECTORY"
      ansible.builtin.file:
        name: "{{ nautobot_root }}"
        mode: "0775"
        state: "directory"

    - name: "INSTALL NAUTOBOT"
      ansible.builtin.pip:
        name: "nautobot=={{ lookup('env', 'NAUTOBOT_VERSION') }}"
        virtualenv: "{{ nautobot_root }}"
        virtualenv_command: "python3 -m venv"

    - name: "RUN NAUTOBOT-SERVER INIT"
      ansible.builtin.command: "{{ nautobot_root }}/bin/nautobot-server init"

    - name: "UPDATE NAUTOBOT CONFIG"
      ansible.builtin.template:
        src: "nautobot_config.py"
        dest: "{{ nautobot_root }}/nautobot_config.py"
        mode: "0644"

    - name: "RUN MAKEMIGRATIONS"
      # yamllint disable-line rule:line-length
      ansible.builtin.command: "{{ nautobot_root }}/bin/nautobot-server makemigrations"

    - name: "RUN MIGRATE"
      ansible.builtin.command: "{{ nautobot_root }}/bin/nautobot-server migrate"

        #- name: "INSTALL NAUTOBOT PLUGINS"
        #  ansible.builtin.pip:
        #    name: "{{ item }}"
        #    virtualenv: "{{ nautobot_root }}"
        #    virtualenv_command: "python3 -m venv"
        #  with_items:
        #    - "nautobot-chatops"
        #    - "nautobot-device-onboarding"
        #    - "nautobot-circuit-maintenance"
        #    - "nautobot-data-validation-engine"
        #    - "nautobot-capacity-metrics"
        #    - "nautobot-golden-config"
        #    - "nautobot-plugin-nornir"
        #    - "nautobot-netbox-importer"
